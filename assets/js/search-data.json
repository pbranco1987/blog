{
  
    
        "post0": {
            "title": "Title",
            "content": "# Cross Entropy and Maximum Likelihood Estimation &gt; In this article, I will discuss what Cross Entropy means from an information theoretical point of view and how it relates to key concepts in Machine Learning, including the log-loss cost function in linear regression classification and parameter estimation. - toc: true - branch: master - badges: true - comments: true - categories: [Tutorial, Information Theory, Cost Function, Maximum Likelihood Estimation, Entropy, Cross Entropy, Log-loss Function, Kullback-Leibler Divergence] - hide: false - search_exclude: true - metadata_key1: metadata_value1 - metadata_key2: metadata_value2 Introduction . Entropy in Thermodynamics is a measure of a system&#39;s disorder: the higher the disorder, the greater the entropy. Information can also be seen as a form of entropic measure. Information that is &quot;unordered&quot;, that is, which is highly uncertain, presents us with more surprise than well-established, organized facts. It is hence more &quot;informative&quot;. . It is also of interest to note that such concepts in Thermodynamics as the Gibbs Free Energy (the enthalpy minus the product of the temperature and the entropy) have corresponding properties, quantities and concepts in Information Theory. And this is not by chance, as the arrangement and the evolution of the state of matter conveys information and, ultimately, tweaking with the properties of matter is how information is conveyed. Think about the way digital information is relayed. The standard is to have it transmitted via fluctuations in electromagnetic waves. These waves are said to be modulated by the data. . That is not the end of it. Information Theory finds its way also in Machine Learning. Machine Learning is the science of finding patterns, of trying to elicit information from that which we observe. I did not use the word information by chance, as the role of models, independent variables, and parameter estimation (in the traditional sense of maximum-likelihood estimation) is to obtain from a complex observation its essentials for prognostics, prediction, clustering, and a myriad of other applications. . In what follows, we will explore one very interesting quantity: the cross entropy. We will see that its main virtue is to compare a model to experimental data and to tell how much excess information is required for modeling data with a probability distribution different to the true ditribution of the data. . Entropy as a Measure of Uncertainty . In order to understand cross entropy, we must first lay out the foundations of entropy. This quantity is a description of the uncertainty of a random variable. We want to measure how uncertain a probabilistic event is. Essentially, the more unlikely an event is, the more surprising it is and, consequently, the more information it holds. To say that it is raining now contains no information. It is a certain event that bears no surprise. However, to say that there is a $35$% probability that it will rain tomorrow does contain information. If we were faced instead with a probability of $50$% that it will rain, would we be more or less certain of tomorrow&#39;s weather? It seems reasonable to say that we would be less certain, because the $35$% probability of rain implies a probability of $65$% of no rain, whilst $50$% either way essentially leaves us with the most amount of doubt possible. This is an essential aspect of entropy: it is maximized for equally-likely events. Another illustrative example is a biased die and a fair die. Let us imagine that the biased die is heavily biased towards the six-dotted side such that for this die&#39;s events $ {1,2,3,4,5,6 }$, the corresponding set of probabilities is given by . $$ begin{equation} left lbrace frac{1}{12}, frac{1}{12}, frac{1}{12}, frac{1}{12}, frac{1}{12}, frac{7}{12} right rbrace end{equation} $$. . The fair die, on the other hand, follows the traditional distribution . $$ begin{equation} left lbrace frac{1}{6}, frac{1}{6}, frac{1}{6}, frac{1}{6}, frac{1}{6}, frac{1}{6} right rbrace end{equation} $$. . If you were to gamble, which die would you pick? Which one makes you less uncertain of your choice, or, better still, which one decreases the entropy you experience? Evidently, it is not the fair die, for, once again, uniform distributions maximize entropy. . As we can see, there is a relationship between the probability of a random variable&#39;s events and its entropy. Let $X$ be a random variable, $ mathcal{X}$ its support group, and $H(X)$ its entropy. According to [Cover-Thomas,2006], entropy is defined as . $$ begin{equation} label{eq:entropy} H(X) triangleq sum limits_{x in mathcal{X}} p_X (x) log_2 left( frac{1}{p_X (x)} right) = - sum limits_{x in mathcal{X}} p_X (x) log_2 left( p_X (x) right) tag{1} end{equation} $$where the $ log$ operational is defined under base $2$. This gives us the basic unit of information: the bit. Entropy can also be computed with different base values, including $e$, in which case the unit of measurement becomes the &quot;nat&quot;. It is useful to distinguish now between the information theoretical bit and the bit in computer science. In computer science, the bit is the basic unit of storage. It is the placeholder for data, even redundant, uninformative data. In Information Theory, the bit is the basic unit of actual information, stripped of all redundancy. . Equation $ eqref{eq:entropy}$ has one important property: $H(x) geq 0$, because probability values are also greater than or equal to zero. This makes sense, as the natural interpretation of information does not lead to the definition of negative information. . Let $X$ be a random variable with categories $ left lbrace a,b,c,d right rbrace$. If the associated probabilities are $ { 0.2,0.1,0.3,0.4 }$, eq. $ eqref{eq:entropy}$ tells us that . $$ begin{align} H(X) &amp;= -p(a) log_2 left( p(a) right) - p(b) log_2 left( p(b) right) - p(c) log_2 left( p(c) right) -p(d) log_2 left( p(d) right) &amp;= -0.2 log_2(0.2) - 0.1 log_2(0.1) - 0.3 log_2(0.3) - 0.4 log_2(0.4) end{align} $$where $p(u)$ for $u in {a,b,c,d }$ is a shorthand for $p_X (X = u)$. . H_X = -0.2*np.log2(0.2) - 0.1*np.log2(0.1) - 0.3*np.log2(0.3) - 0.4*np.log2(0.4) print(H_X) . 1.8464393446710154 . We observe that on average we can describe $X$ with approximately $1.85$ bits. Those are essential bits that cannot be discarded. If discarded, information is lost. But let us say that we want to represent $X$ with $3$ bits. That is possible, and it would not result in any loss of information, but it does result in redundancy. In communication systems, such redundancy is very undesirable, since it results in a surplus of transmitted energy. . Another interpretation for entropy that is very intuitive is how many binary questions do we have to ask to determine with certainty some piece of information. Say we have a random variable $Y$ with equally-likely events $ {0,1,2,3,4,5,6,7 }$. Say we would like to determine one of those events, how many binary questions do we have to ask? Intuitively, you may have already guessed that 3, hence 3 bits, but let us formalize the questions for $Y=1$, without incurring any loss of generality: . Is $Y geq 4$? No, therefore our set has been reduced to $ {0,1,2,3 }$. | Is $Y geq 2$? No, therefore our set has been reduced to $ {0,1 }$. | Is $Y geq 1$? Yes, and we have found the targeted element. | . Based on this question rule and on the Boolean values assigned to the answers, we can even arrive at a possible binary code to event $Y=1$, namely $(001)_2$. . Now, let us focus on an important special case: that of Bernoulli-distributed random variables. Let $X$ be a random variable defined with two possible states $ {0,1 }$. These states are respectively defined by the following probabilities: . $$ begin{aligned} p(0) &amp;= 1 - theta p(1) &amp;= theta end{aligned} $$Now, let us vary $ theta in [0,1]$ within its domain in order to observe the effects on the binary entropy $H(p)$ (it is a standard notation to label the binary entropy with this nomenclature). . def entropy(p,eps): # entropy function p = p+eps return -np.dot(p,np.log2(p)) . eps = 1e-15 # added so that we do not have log(0), which is undefined . nel = 100 # creating the list of entropies for theta = 0, 0.01, ..., 1 p_list = np.linspace(0,1,nel+1) p_set = [np.array([p, 1-p]) for p in p_list] Hp = [entropy(value,eps) for value in p_set] dic = {&#39;P(x=1)&#39;:p_list, &#39;Hp&#39;:Hp} # converting to a dictionary for the Seaborn library . dfentropy = pd.DataFrame(dic) # plotting the binary entropy curve sns.set_style(&quot;whitegrid&quot;) fig_dims = (10, 6) fig,ax = plt.subplots(figsize=fig_dims) ax.set(xlim=(0,1), ylim=(0,1), xticks=np.linspace(0,1,11)) sns.lineplot(x=&quot;P(x=1)&quot;, y=&quot;Hp&quot;, ax=ax, data=dfentropy) plt.title(&#39;Binary Entropy&#39;) . Text(0.5, 1.0, &#39;Binary Entropy&#39;) . As we can see from the graph, the binary entropy $H(p)$ is zero at both $P(X=1) = 0 $ and $P(X=1) = 1$, because at those two points, the variable is not random; it is certain that it is $0$ and $1$, respectively. On the other hand, at $P(X=1) = 0.5 $, entropy is maximized, since both events are equally likely: $P(X=0) = 0.5$ and $P(X=1) = 0.5$. Consequently, we have the most uncertainty (one bit) at this point. . Kullback-Leibler Divergence: The Distance Between Probability Density Functions . One quantity very closely related to the entropy is the Kullback-Leibler (KL) Divergence, also known as the relative entropy. Let $X$ be a random variable and let $p_X$ and $q_X$ (for which we will use for convenience the shorthand $p$ and $q$, respectively) be two distributions that describe the probability density function of $X$. The distribution $p$ is the true distribution, the one that generates the observed, experimental data. Distribution $q$, on the other hand, is a modeled distribution. It is the attempt to estimate $p$. According to [Cover-Thomas, 2006], the KL Divergence is defined as . $$ begin{equation} label{eq:KLdiv} D(p||q) triangleq sum limits_{x in mathcal{X}} p(x) log left( frac{p(x)}{q(x)} right) tag{2} end{equation} $$where the $D(p||q)$ is usually computed with the $ log$ function under base $e$, i.e., the convention is to operate the divergence functional in terms of nats. . The KL divergence measures how similar $q$ is to $p$. Concretely, it tells how many extra bits the distribution $q$ adds to the entropy of $X$. In order to observe this, let us go back to eq. $ eqref{eq:KLdiv}$ . $$ begin{align} label{eq:KLdiv_cross_entropy} D(p||q) &amp;= sum limits_{x in mathcal{X}} p(x) log p(x) - p(x) log (q(x)) &amp;= - sum limits_{x in mathcal{X}} p(x) log q(x) - H(X) tag{3} end{align} $$The sum term on the right is the cross entropy. For the time being, let us simply see it as a form of entropy computed as an expected value with regard to another probability distribution. Let us illustrate this with a numerical example. Let $X$ be a random variable and let its states be $ {a,b,c,d }$ with probability distribution . $$ begin{equation} p = left lbrace frac{1}{4}, frac{1}{8}, frac{1}{16}, frac{9}{16} right rbrace end{equation} $$Its entropy is calculated as . entropy(np.array([1/4,1/8,1/16,9/16]), eps) * np.log(2) # here the entropy was multiplied by log_e(2) to convert it to nats . 1.1034329096381947 . Let us now calculate the expected value with regard to a different probability distribution . $$ begin{equation} q = left lbrace frac{1}{4}, frac{1}{4}, frac{1}{4}, frac{1}{4} right rbrace end{equation} $$This results in . $$ begin{align} - sum limits_{x in mathcal{X}} p(x) log q(x) &amp;= - frac{1}{4} log frac{1}{4} - frac{1}{8} log frac{1}{4} - frac{1}{16} log frac{1}{4} - frac{9}{16} log frac{1}{4} &amp;= - log frac{1}{4} left( frac{1}{4} + frac{1}{8} + frac{1}{16} + frac{9}{16} right) &amp;= - log frac{1}{4} end{align} $$ H_pq = -np.log(1/4) print(H_pq) . 1.3862943611198906 . It is clear to see that the entropy represents the random variable with less information. This is in fact another property of the entropy. It stands for the fewest number of information units necessary to describe a random variable. . If $q$ were $p$, i.e., $D(p||p)$ would then reduce to . $$ begin{align} D(p||p) &amp;= - sum limits_{x in mathcal{X}} p(x) log p(x) - H(X) &amp;= H(X) - H(X) = 0 end{align} $$This gives us another insight into the KL divergence. Given that $- sum_{x in mathcal{X}} p(x) log q(x) geq H(X) $ and $H(X) geq 0$, then $D(p||p) geq 0$ and it is equal to 0 iff $- sum_{x in mathcal{X}} p(x) log p(x) = H(X)$. . Cross Entropy and its Relationship to KL Divergence . We are now going to give a name to the quantity $- sum_{x in mathcal{X}} p(x) log q(x)$. As we hinted in the last section, this is the cross entropy $H_{p,q}$. Therefore, . $$ begin{equation} H_{p,q} = - sum_{x in mathcal{X}} p(x) log q(x) end{equation} $$This quantity is extremely closely associated to the KL divergence . Cross Entropy as a Cost Function in Machine Learning . def cross_entropy(p,q,eps): q = q+eps return -np.dot(p,np.log(q)) . def kullback_leibler(p,q,eps): p = p+eps; q = q+eps return np.dot(p,np.log(p/q)) . eps = 1e-15 . p = np.random.rand(10) p /= p.sum() cats = list(string.ascii_lowercase[:len(p)]) dic = {&#39;Category&#39;:cats, &#39;Probability&#39;:p} dist = pd.DataFrame(dic) . sns.set_style(&quot;dark&quot;) fig_dims = (10, 6) fig,ax = plt.subplots(figsize=fig_dims) sns.barplot(x = &quot;Category&quot;, y = &quot;Probability&quot;, palette=&quot;deep&quot;, ax=ax, data=dist) plt.title(&quot;Probability Distribution&quot;, size=18) plt.show() . Writing a similar distribution to $ mathbf{p}$. Let us call it $ mathbf{q}$ . q = p.copy() . q[-1] = 0.95*p[-1] dic = {&#39;Category&#39;:cats, &#39;Probability&#39;:q} dist = pd.DataFrame(dic) fig,ax = plt.subplots(figsize=fig_dims) sns.barplot(x = &quot;Category&quot;, y = &quot;Probability&quot;, palette=&quot;deep&quot;, ax=ax, data=dist) plt.title(&quot;Probability Distribution&quot;, size=18) plt.show() . Let us compute now the entropy of each distribution and their cross entropy . entropy(p,eps) . 2.939216005941008 . entropy(q,eps) . 2.9323863552926404 . H_pq = cross_entropy(p,q,eps) print(H_pq) . 2.0395717057519773 . Now choosing a completely random $ mathbf{q}$ . q = np.random.rand(10) q = q/q.sum() dic = {&#39;Category&#39;:cats, &#39;Probability&#39;:q} dist = pd.DataFrame(dic) fig,ax = plt.subplots(figsize=fig_dims) sns.barplot(x = &quot;Category&quot;, y = &quot;Probability&quot;, palette=&quot;deep&quot;, ax=ax, data=dist) plt.title(&quot;Probability Distribution&quot;, size=18) plt.show() . H_pq = cross_entropy(p,q,eps) print(H_pq) . 2.4563381448559105 . Now let us say that we use the Cross Entropy for the classification problem . The category $a$ is going to be chosen for RV $T$ . q = np.zeros(10) q[0] = 1 pp.pprint(q) . array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) . cross_entropy(p,q,eps) . 31.727764499265103 . If $ mathbf{p}$ were close to $ mathbf{q}$, then . p = np.array([0.985, 0.015, 0, 0, 0, 0, 0, 0, 0, 0]) . cross_entropy(p,q,eps) . 0.5180816459236591 . nel = 99 p_list = np.linspace(0, 0.99, nel+1) N = 8 p_set = [np.pad([p,1-p], (0,N), &#39;constant&#39;, constant_values=0) for p in p_list] H_pq = [cross_entropy(value,q,eps) for value in p_set] KL = [kullback_leibler(value,q,eps) for value in p_set] dic_pq = {&#39;P(x=1)&#39;:p_list, &#39;H_pq&#39;:H_pq} dic_KL = {&#39;P(x=1)&#39;:p_list, &#39;KL&#39;:KL} . dfcross_entropy = pd.DataFrame(dic_pq) dfkullback_leibler = pd.DataFrame(dic_KL) sns.set_style(&quot;whitegrid&quot;) fig_dims = (10, 6) fig,ax =plt.subplots(1,2,figsize=fig_dims) ax[0].set(xlim=(0,1), xticks=np.linspace(0,1,11)) sns.lineplot(x=&quot;P(x=1)&quot;, y=&quot;H_pq&quot;, data=dfcross_entropy, ax=ax[0]) ax[0].set_title(&#39;Cross Entropy&#39;) ax[1].set(xlim=(0,1), xticks=np.linspace(0,1,11)) sns.lineplot(x=&quot;P(x=1)&quot;, y=&quot;KL&quot;, data=dfkullback_leibler, ax=ax[1]) ax[1].set_title(&#39;Kullback-Leibler&#39;) . Text(0.5, 1.0, &#39;Kullback-Leibler&#39;) . dfcross_entropy.head() . P(x=1) H_pq . 0 0.00 | 34.538776 | . 1 0.01 | 34.193389 | . 2 0.02 | 33.848001 | . 3 0.03 | 33.502613 | . 4 0.04 | 33.157225 | .",
            "url": "https://www.prbranco.com/2020/10/29/blog.html",
            "relUrl": "/2020/10/29/blog.html",
            "date": " • Oct 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://www.prbranco.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://www.prbranco.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Paulo Branco. I am an electrical engineering with a strong mathematical foundation splitting my time between São Paulo and Florianópolis. My passion is learning and exploring new developments not only in Machine learning, but also in other scientific areas, such as Game Theory, Probability, Information Theory, and Physics. . I have a Ph.D. in Information Theory by the Universidade Federal de Santa Catarina. I spent a year in Imperial College London for a research internship, during which time I worked with polar lattices and other tools for the quantization and shaping of capacity-achieving lattices. My research has to this day dealt mainly with error correction coding, spectral-efficient lattice coding in Gaussian channels, and cooperative communication schemes in relay networks. However, my plan is to open up my horizons and explore new fields of knowledge and find out what is out there. . My current interest has switched to Machine Learning, but I conserve my original interest in information theoretical topics. I am currently delving into Deep Learning, in particular in Natural Language Processing and Computer Vision. But, in all honesty, any topic that involves probability, statistics, data wrangling, and applied mathematics is a topic of interest to me. . Please feel free to contact me and to share your research with me. Feel also free to ask me about the contents of my posts, my tutorials. I look forward to sharing, discovering, exploring. If you have any content which you would like me to take a look, any research you are conducting that you would like to share, I am more than willing to converse. . Your Webhost, Paulo Branco .",
          "url": "https://www.prbranco.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About this Site",
          "content": "This site has been conceived to provide the reader an array of topics in many fields of research. Data Science, Machine Learning and Information Theory will be the main topics of discussion. However, I will not exclusively broach these topics, as the intent of this website is to explore my interests, and they are varied. . Aside from that, I will dedicate a page to one of my side passions, which is to explore the history of science. Every so often I intend to issue an article discussing how scientific breakthroughs that are of particular interest to me were achieved. I also intend to summarise and impart to the reader the importance of some seminal papers. . This page also contains data about me, including a page dedicated to my Curriculum Vitae and a page with general information about my purpose in creating a website. . Last but not least, this webpage will also serve to showcase all my Data Science and Machine Learning projects. It will function as a “repo” of sorts. It will be not code-heavy (the code specifics will be available on my github page). It will contan though a walk-through of what I have done in Jupyter Notebook format. . Your Webhost, Paulo Branco .",
          "url": "https://www.prbranco.com/about_site/",
          "relUrl": "/about_site/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Curriculum Vitae",
          "content": "My Curriculum Vitae is provided below in Markdown. . . Personal Information . Name: Paulo Ricardo Branco da Silva | Civil Status: Single | Date of Birth: 02/09/1987 | Residential Address: Rua Alba Dias Cunha, 100, apto. 31 | City: Santo André, Brazil | Mobile: +55 11 95585-5725 | . . Professional Experience . University Vector Calculus Professor at Uniasselvi From September 2017 to March 2019 | Double and triple integrals, gradient, divergence, curl, Stokes’ Theorem | . | Lab Assistant at Instituto Mauá de Tecnologia From January 2012 to December 2012 | Kalman filters | Testing of the LEON 3 softprocessor implemented on a Xylinx FPGA | Tests with low-energy networks, including ZigBee | . | Internship as Telecommunications Engineer at Invensys From February 2011 to January 2012 | Implementation of a SCADA-based control system | Relay of sensitive data via web queries and GPRS signals | . | Internship as PLC Engineer at Siemens From January 2011 to March 2011 | Sales of Programmable Logic Controller units and technical assistance | . | . . Education . Ph.D. in Information Theory at the Universidade Federal de Santa Catarina (UFSC) From March 2016 to September 2020 | Research internship in Imperial College London | Design of lattices | . | Master’s in Information Theory at the Universidade Federal de Santa Catarina (UFSC) From March 2013 to November 2015 | LDPC Codes applied to cooperative networks using the Compute &amp; Forward communication scheme | Use of multilevel coding for spectral efficiency | . | Bachelor’s in Electrical Engineering majoring in Electronics at Instituto Mauá de Tecnologia (IMT) From February 2007 to January 2012 | . | . . Skills . Programming: C, Python, Java, R, MATLAB | Webpage Development | Probability and statistics | Optimization Convex | Linear Programming | Genetic Algorithms | . | Machine learning | Data science SciKit Learn | pyTorch | Keras | Pandas | Graphing Tools: Matplotlib, Seaborn | . | Databases MySQL | . | . . Academic Articles Published . . Events . . Languages . Language Proficiency . Portuguese | Native | . Spanish | C2 | . French | C2 (conferred TCF Tout Public) | . Italian | A2 | . English | C2 (TOEFL iBT - Score: 117) | . German | C2 (conferred by TestDaF) | . Russian | A1 | . . A PDF copy of my curriculum is available here. . Your Webhost, Paulo Branco .",
          "url": "https://www.prbranco.com/curriculum/",
          "relUrl": "/curriculum/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.prbranco.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}